//--------------------------------------------------------
// ORRandomPulserController
// Created by Mark  A. Howe on Tue Oct 12 2004
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2004 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORRandomPulserController.h"
#import "ORRandomPulserModel.h"


@implementation ORRandomPulserController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"RandomPulser"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
	 [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
	 [super registerNotificationObservers];

	[notifyCenter addObserver : self
		selector: @selector(pulserRateChanged:)
		name: ORRandomPulserPulserRateChangedNotification
		object : model];

	[notifyCenter addObserver : self
		selector: @selector(pulserAmpChanged:)
		name: ORRandomPulserPulserAmpChangedNotification
		object : model];

   [notifyCenter addObserver : self
	    selector : @selector(settingsLockChanged:)
	    name : ORRunStatusChangedNotification
	    object : nil];

    [notifyCenter addObserver : self
	    selector : @selector(settingsLockChanged:)
	    name : ORRandomPulserSettingsLock
	    object: nil];

	[notifyCenter addObserver : self
		selector: @selector(ttlPulseStateChanged:)
		name: ORRandomPulserTTLPulseStateChangedNotification
		object : model];

	[notifyCenter addObserver : self
		selector: @selector(negPulseStateChanged:)
		name: ORRandomPulserNegPulseStateChangedNotification
		object : model];

}

- (void) updateWindow
{
    [super updateWindow];
	[self pulserRateChanged:nil];
	[self pulserAmpChanged:nil];
    [self settingsLockChanged:nil];
	[self ttlPulseStateChanged:nil];
	[self negPulseStateChanged:nil];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORRandomPulserSettingsLock to:secure];
    [settingLockButton setEnabled:secure];
}

- (void) settingsLockChanged:(NSNotification*)aNotification
{

    BOOL locked = [gSecurity isLocked:ORRandomPulserSettingsLock];

    [settingLockButton setState: locked];
    [rateStepper setEnabled:!locked];
    [rateField setEnabled:!locked];
    [ampStepper setEnabled:!locked];
    [ampField setEnabled:!locked];
    [loadHWButton setEnabled:!locked];
    [readHWButton setEnabled:!locked];
    [ttlPulseStateMatrix setEnabled:!locked];
    [negPulseStateMatrix setEnabled:!locked];
    
}

- (void) pulserRateChanged:(NSNotification*)aNote
{
	[rateField setIntValue:[model pulserRate]];
	[rateStepper setIntValue:[model pulserRate]];
}

- (void) pulserAmpChanged:(NSNotification*)aNote
{
	[ampField setFloatValue:[model pulserAmpmV]];
	[ampStepper setFloatValue:[model pulserAmpmV]];
}

- (void) ttlPulseStateChanged:(NSNotification*)aNote
{
	[ttlPulseStateMatrix selectCellWithTag:[model ttlPulserState]];
}

- (void) negPulseStateChanged:(NSNotification*)aNote
{
	[negPulseStateMatrix selectCellWithTag:[model negPulserState]];
}


#pragma mark ***Actions
- (IBAction) ttlPulseStateMatrixAction:(id)sender
{
	[model setTtlPulserState:[[sender selectedCell]tag]];
}

- (IBAction) negPulseStateMatrixAction:(id)sender
{
	[model setNegPulserState:[[sender selectedCell]tag]];
}

- (IBAction) ampFieldAction:(id)sender
{
	[model setPulserAmpmV:[sender floatValue]];
}

- (IBAction) rateAction:(id)sender
{
	[model setPulserRate:[sender intValue]];
}

- (IBAction) loadHWAction:(id)sender
{
    [self endEditing];
	[model setHardware];
}
- (IBAction) readHWAction:(id)sender
{
    [self endEditing];
	[model readHardware];
}

- (IBAction) settingLockAction:(id) sender
{
    [gSecurity tryToSetLock:ORRandomPulserSettingsLock to:[sender intValue] forWindow:[self window]];
}

@end

